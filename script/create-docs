#!/usr/bin/env node

var fs = require("fs");
var ZeParser = require("zeparser").ZeParser;

function nodesWithValue(value, tokens) {
    return tokens.filter(function (node) {
        return node.value === value;
    });
}

function firstWithValueAfter(value, node, tokens) {
    var i = node.tokposw;
    while (tokens[++i] && tokens[i].value !== value) {}
    return tokens[i];
}

var doc_comment_start = /^\/\*\*/;

function docCommentNodeFor(node) {
    var i = node.tokposw;
    while (tokens[--i] && !tokens[i].value.match(doc_comment_start)) {
        if (tokens[i].tokposb) {
            return null; // found non-whitespace/non-comment before doc comment
        }
    }
    return tokens[i];
}

var spaces_star_spaces = / *\* */;

function removeLeadingStars(line) {
    return line.replace(spaces_star_spaces, "");
}

var comment_end = /\*\//;

function stripCommentMarkers(comment) {
    comment = comment.replace(doc_comment_start, "");
    comment = comment.replace(comment_end, "");
    comment = comment.split("\n").map(removeLeadingStars).join(" ").trim();
    return comment;
}

function docCommentFor(node) {
    var comment = docCommentNodeFor(node);
    return comment ? stripCommentMarkers(comment.value) : "";
}

function fnListComment(tokens) {
    var nodes = nodesWithValue("/** docs:function-list */", tokens);
    if (!nodes.length === 1) {
        throw new Error("Should be exactly one comment signifying where the function-list is, like this: /* docs:function-list */");
    }
    return nodes[0];
}

function fnName(o) {
    return o.funcName && o.funcName.value;
}

function val(o) { return o.value; }

function fnParams(o) {
    return o.paramNames ? o.paramNames.map(val) : [];
}

function fnSignature(o) {
    return "(" + fnParams(o).join(", ") + ")";
}

function fnList(tokens) {
    var objectLiteral = firstWithValueAfter("{", fnListComment(tokens), tokens);
    return objectLiteral.targetScope.functions;
}

function publicFnList(tokens) {
    return fnList(tokens).filter(function (o) {
        var name = fnName(o);
        return name && name[0] !== "_";
    });
}

function githubLinkID(s) {
    return s.replace(/[^a-zA-Z0-9-]+/g, "-").replace(/-$/, "");
}

function functionIndex1(fn) {
    var name = fnName(fn);
    var signature = fnSignature(fn);
    var link = githubLinkID(name + " " + signature);
    return "* [" + name + "](#" + link  + ") `" + signature + "`";
}

function functionIndex(fns) {
    return fns.map(functionIndex1).join("\n");
}

function functionDocs1(fn) {
    return [
        "### ",
        fnName(fn),
        " `",
        fnSignature(fn),
        "`\n\n",
        docCommentFor(fn)
    ].join("");
}

function functionDocs(fns) {
    return fns.map(functionDocs1).join("\n\n");
}

function loadCullTokens(path) {
    var cull = fs.readFileSync(path, "utf-8");
    var p = ZeParser.createParser(cull);
    p.tokenizer.fixValues();
    return p.tokenizer.wtree;
}

var tokens = loadCullTokens("../lib/cull.js");
var template = fs.readFileSync("../readme-template.md", "utf-8");
var fns = publicFnList(tokens);

var result = template.
        replace("[[ function-index ]]", functionIndex(fns)).
        replace("[[ function-docs ]]", functionDocs(fns));

fs.writeFileSync("../README.md", result, "utf-8");
