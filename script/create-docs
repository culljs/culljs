#!/usr/bin/env node

var fs = require("fs");
var ZeParser = require("zeparser").ZeParser;

function nodesWithValue(value, tokens) {
    return tokens.filter(function (node) {
        return node.value === value;
    });
}

function firstWithValueAfter(value, node, tokens) {
    var i = node.tokposw;
    while (tokens[++i] && tokens[i].value !== value) {}
    return tokens[i];
}

var doc_comment_start = /^\/\*\*/;

function docCommentNodeFor(node, cullTokens) {
    var i = node.tokposw;
    while (cullTokens[--i] && !cullTokens[i].value.match(doc_comment_start)) {
        if (cullTokens[i].tokposb) {
            return null; // found non-whitespace/non-comment before doc comment
        }
    }
    return cullTokens[i];
}

var spaces_star_spaces = / *\* */;

function removeLeadingStars(line) {
    return line.replace(spaces_star_spaces, "");
}

var comment_end = /\*\//;

function stripCommentMarkers(comment) {
    comment = comment.replace(doc_comment_start, "");
    comment = comment.replace(comment_end, "");
    comment = comment.split("\n").map(removeLeadingStars).join("\n").trim();
    return comment;
}

function docCommentFor(node, cullTokens) {
    var comment = docCommentNodeFor(node, cullTokens);
    return comment ? stripCommentMarkers(comment.value) : "";
}

function fnListComment(tokens) {
    var nodes = nodesWithValue("/** docs:function-list */", tokens);
    if (!nodes.length === 1) {
        throw new Error("Should be exactly one comment signifying where the function-list is, like this: /* docs:function-list */");
    }
    return nodes[0];
}

function fnName(o) {
    return o.funcName && o.funcName.value;
}

function val(o) { return o.value; }

function fnParams(o) {
    return o.paramNames ? o.paramNames.map(val) : [];
}

function fnSignature(o) {
    return "(" + fnParams(o).join(", ") + ")";
}

function fnList(tokens) {
    var objectLiteral = firstWithValueAfter("{", fnListComment(tokens), tokens);
    return objectLiteral.targetScope.functions;
}

function publicFnList(tokens) {
    return fnList(tokens).filter(function (o) {
        var name = fnName(o);
        return name && name[0] !== "_";
    });
}

function githubLinkID(s) {
    return s.replace(/[^a-zA-Z0-9-]+/g, "-").replace(/-$/, "");
}

function functionIndex1(fn) {
    var name = fnName(fn);
    var signature = fnSignature(fn);
    var link = githubLinkID(name + " " + signature);
    return "* [" + name + "](#" + link  + ") `" + signature + "`";
}

function functionIndex(fns) {
    return fns.map(functionIndex1).join("\n");
}

function chopOff(superflousIndent) {
    var l = superflousIndent.length;
    return function (s) {
        return s.substring(0, l) === superflousIndent ? s.substring(l) : s;
    };
}

function reduceIndentation(s) {
    var ss = s.replace(/^\n*/, "").split("\n");
    var superflousIndent = ss[0].match(/^ */)[0];
    return ss.map(chopOff(superflousIndent)).join("\n").trim();
}

function fnBody(fn, contents) {
    return contents.substring(fn.lhc.start + 1, fn.rhc.stop - 1);
}

function examplesFor(name, testTokens, testContents) {
    var contextNodes = nodesWithValue('"' + name + '"', testTokens);
    if (!contextNodes || !contextNodes.length) return "";
    var fn = firstWithValueAfter("function", contextNodes[0], testTokens);
    return reduceIndentation(fnBody(fn, testContents));
}

function functionDocs1(cullTokens, testTokens, testContents, fn) {
    return [
        "### ",
        fnName(fn),
        " `",
        fnSignature(fn),
        "`\n\n",
        docCommentFor(fn, cullTokens),
        "\n\n",
        "```js\n",
        examplesFor(fnName(fn), testTokens, testContents),
        "\n```"
    ].join("");
}

function functionDocs(fns, cullTokens, testTokens, testContents) {
    var fn = functionDocs1.bind(null, cullTokens, testTokens, testContents);
    return fns.map(fn).join("\n\n");
}

function loadTokens(contents) {
    var p = ZeParser.createParser(contents);
    p.tokenizer.fixValues();
    return p.tokenizer.wtree;
}

var cullTokens = loadTokens(fs.readFileSync("../lib/cull.js", "utf-8"));

var testContents = fs.readFileSync("../test/cull-test.js", "utf-8");
var testTokens = loadTokens(testContents);

var template = fs.readFileSync("../readme-template.md", "utf-8");
var fns = publicFnList(cullTokens);

var result = template.
        replace("[[ function-index ]]", functionIndex(fns)).
        replace("[[ function-docs ]]", functionDocs(fns, cullTokens, testTokens, testContents));

fs.writeFileSync("../README.md", result, "utf-8");
