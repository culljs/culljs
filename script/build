#!/usr/bin/env node
var fs = require("fs");
var uglify = require("uglify-js");

var files = ["core", "fn", "seq", "dom"];

var last = function (pieces) {
    return pieces[pieces.length - 1];
};

var readFile = function (file) {
    var content = fs.readFileSync(file, "utf8");
    return last(content.split("//\"use locals\";")).split("module.exports")[0];
};

var buildFile = function (files) {
    var content = files.reduce(function (content, file) {
        return content += readFile("lib/" + file + ".js");
    }, "").split("\n").join("\n    ").trim();
    return fs.readFileSync("script/cull-template.js", "utf8").replace("${cull}", content);
};

var minify = function (code) {
    var u = uglify.uglify;
    return u.gen_code(u.ast_squeeze(u.ast_mangle(uglify.parser.parse(code))));
};

var zeroPad = function (num) {
    return num < 10 ? "0" + num : num;
};

var addLicense = function (code) {
    var license = fs.readFileSync("LICENSE", "utf8");
    var version = JSON.parse(fs.readFileSync("package.json", "utf8")).version;
    var date = new Date();
    return "/**\n * Cull.JS " + version + ", " + date.getFullYear() + "-" +
        zeroPad(date.getMonth() + 1) + "-" + zeroPad(date.getDate()) + "\n * " +
        license.split("\n").join("\n * ") + "\n */\n" + code;
};

var opt = function (short, long) {
    for (var i = 2, l = process.argv.length; i < l; ++i) {
        if (new RegExp(short + "|" + long).test(process.argv[i])) {
            return true;
        }
    }
    return false;
};

if (opt("-h", "--help")) {
    console.log("Produce the cull.js distribution");
    console.log("Usage:");
    console.log("    script/build [opt]");
    console.log("        -m --minify     Produce minified distribution");
    console.log("        -n --no-license Skip the license header");
    console.log("        -h --help       Show this message");
    process.exit(1);
}

try {
    fs.mkdirSync("dist");
} catch (e) {}

var cull = buildFile(files);
var willMinify = opt("-m", "--minify");
var noLicense = opt("-n", "--no-license");

if (willMinify) {
    cull = minify(cull);
}

if (!noLicense) {
    cull = addLicense(cull);
}

var target = willMinify ? "dist/cull.min.js" : "dist/cull.js";
fs.writeFileSync(target, cull, "utf8");
var size = (Math.floor((cull.length * 1000 / 1024)) / 1000);
var message = "Produced " + (willMinify ? "minified " : "");
console.log(message + target + " (~" + size + "kB)");
